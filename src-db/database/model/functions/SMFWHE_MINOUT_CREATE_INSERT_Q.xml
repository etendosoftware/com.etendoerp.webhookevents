<?xml version="1.0"?>
  <database name="FUNCTION SMFWHE_MINOUT_CREATE_INSERT_Q">
    <function name="SMFWHE_MINOUT_CREATE_INSERT_Q" type="NULL">
      <parameter name="p_ep_instance" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[p_record_id VARCHAR2(60);
p_message VARCHAR2(2000);
p_docAction VARCHAR2(60);
p_user VARCHAR2(60);
p_result NUMBER;
p_exist_event VARCHAR2(1) := 'N';
p_ad_client VARCHAR2(32);
p_event_id VARCHAR2(32);
p_ad_table_id VARCHAR2(32) := '319';
 
TYPE RECORD IS REF CURSOR;
Cur_Params RECORD;
Cur_Minout RECORD;
Cur_Event RECORD;
 
BEGIN
 
  FOR Cur_Params IN (
    SELECT *
    FROM ad_ep_instance_para
    WHERE ad_ep_instance_id = p_ep_instance
    ) LOOP
    IF (cur_params.parametername LIKE 'DocAction') THEN
      p_docaction := Cur_Params.p_string;
    ELSIF (cur_params.parametername LIKE 'Record_ID') THEN
      p_record_id := cur_params.p_string;
    ELSIF (cur_params.parametername LIKE 'User') THEN
      p_user := cur_params.p_string;
    ELSIF (cur_params.parametername LIKE 'Message') THEN
      p_message := cur_params.p_text;
    ELSIF (cur_params.parametername LIKE 'Result') THEN
      p_result := cur_params.p_number;
    END IF;
  END LOOP;
 
-- The code goes here

FOR Cur_Minout IN (SELECT * FROM m_inout WHERE m_inout.m_inout_id = p_record_id)
LOOP
  p_ad_client := Cur_Minout.ad_client_id;
END LOOP;

FOR Cur_Event IN (
  SELECT * FROM smfwhe_events e 
  WHERE 
  (e.executeon = 'C' OR e.executeon = 'CU') 
  AND e.ad_table_id = p_ad_table_id
  AND e.ad_client_id = p_ad_client
  AND e.isactive = 'Y')
LOOP
  IF (Cur_Event is not null) THEN
    p_exist_event := 'Y';
    p_event_id := Cur_Event.smfwhe_events_id;
  END IF;
END LOOP;
 
IF (p_exist_event='Y') THEN
  BEGIN
    SMFWHE_QUEUE_WEBHOOKS(p_record_id, p_ad_table_id, p_event_id);
  END;
END IF;
END SMFWHE_MINOUT_CREATE_INSERT_Q
]]></body>
    </function>
  </database>
